// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  manager   Manager?
  class     Class[]

  @@index([name])
  @@map("branches")
}

model Student {
  id               Int                @id @default(autoincrement())
  fullname         String
  email            String
  password         String
  isGraduated      Boolean
  program          String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  MapStudentClass  MapStudentClass[]
  MapLecturerClass MapLecturerClass[]

  @@index([fullname])
  @@map("students")
}

model Manager {
  id     Int    @id @default(autoincrement())
  name   String
  branch Branch @relation(fields: [id], references: [id])

  @@index([name])
  @@map("managers")
}

model Class {
  id        Int      @id @default(autoincrement())
  name      String
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branch    Branch   @relation(fields: [branchId], references: [id])

  MapStudentClass MapStudentClass[]
  branchId        Int
}

model MapStudentClass {
  studentId Int
  classId   Int
  student   Student @relation(fields: [studentId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])

  @@id([studentId, classId])
  @@map("mapStudentClasses")
}

model Lecturer {
  id               Int                @id @default(autoincrement())
  username         String
  fullname         String
  email            String
  password         String
  isActive         Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  MapLecturerClass MapLecturerClass[]

  @@map("lecturers")
}

model MapLecturerClass {
  studentId  Int
  lecturerId Int
  student    Student  @relation(fields: [studentId], references: [id])
  lecturer   Lecturer @relation(fields: [lecturerId], references: [id])

  @@id([studentId, lecturerId])
  @@map("mapLecturerClasses")
}
